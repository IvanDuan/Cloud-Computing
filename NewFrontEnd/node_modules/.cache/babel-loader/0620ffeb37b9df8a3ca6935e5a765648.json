{"ast":null,"code":"import * as actionTypes from '../actionTypes'; // import axios from '../../../axios-orders';\n\nimport { message } from 'antd';\nimport api from '../../../api/api';\nimport { uploadFile } from 'react-s3';\nexport const fetchUsersStart = () => ({\n  type: actionTypes.FETCH_USERS_START\n});\nexport const fetchUsersSuccess = users => ({\n  type: actionTypes.FETCH_USERS_SUCCESS,\n  users\n});\nexport const newUserStart = () => ({\n  type: actionTypes.NEW_USER_START\n});\nexport const newUserSuccess = () => ({\n  type: actionTypes.NEW_USER_SUCCESS\n});\nexport const loginUserStart = () => ({\n  type: actionTypes.LOGIN_USER_START\n});\nexport const loginUserSuccess = data => ({\n  type: actionTypes.LOGIN_USER_SUCCESS,\n  data\n});\nexport const loginUserFail = data => ({\n  type: actionTypes.LOGIN_USER_FAIL,\n  data\n});\nexport const setUserLogin = () => ({\n  type: actionTypes.SET_USER_LOGIN\n});\nexport const setUserLogoff = () => ({\n  type: actionTypes.SET_USER_LOGOFF\n});\nexport const uploadPicStart = () => ({\n  type: actionTypes.UPLOAD_PIC_START\n});\nexport const uploadPicSuccess = data => ({\n  type: actionTypes.UPLOAD_PIC_SUCCESS,\n  data\n});\nexport const uploadPicFail = () => ({\n  type: actionTypes.UPLOAD_PIC_FAIL\n});\nexport const fetchUsers = () => async dispatch => {\n  dispatch(fetchUsersStart());\n\n  try {\n    const response = await api.get('/users');\n    const fetchedUsers = [];\n\n    for (const key in response.data) {\n      fetchedUsers.push({ ...response.data[key]\n      });\n    } //fetchedUsers.sort(compare);\n\n\n    dispatch(fetchUsersSuccess(fetchedUsers));\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createUser = userData => async dispatch => {\n  dispatch(newUserStart());\n  const config = {\n    bucketName: \"aimsbconnectbucket\",\n    Name: \"test.png\",\n    region: \"us-east-1\",\n    accessKeyId: \"AKIA6HGPOTO2LVH67RO2\",\n    secretAccessKey: \"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\"\n  };\n\n  try {\n    uploadFile(userData.profile_pic, config);\n  } catch (err) {\n    console.error(err.message);\n  }\n\n  try {\n    await api.post('/users/', userData);\n    dispatch(newUserSuccess());\n    message.success('User Registration Success!');\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const loginUser = userData => async dispatch => {\n  dispatch(loginUserStart());\n\n  try {\n    const response = await api.post('/user-login', userData);\n\n    if (response.data !== '') {\n      await dispatch(setUserLogin());\n      await dispatch(loginUserSuccess(response.data));\n    } else {\n      throw new Error(\"Invalid Username/Password\");\n    }\n  } catch (err) {\n    const errorUser = {\n      username: 'error'\n    };\n    console.error(err.message);\n    message.error('Invalid Username or Password!');\n    await dispatch(setUserLogoff());\n    dispatch(loginUserFail(errorUser));\n  }\n};\nexport const uploadPic = data => async dispatch => {\n  dispatch(uploadPicStart());\n\n  try {} catch (err) {\n    console.error(err.message);\n  }\n};\n\nconst compare = (a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n\n  if (a.name > b.name) {\n    return 1;\n  }\n\n  return 0;\n};","map":{"version":3,"sources":["C:/Users/tanma/Desktop/AUT/INFS803/Project/Cloud-Computing/NewFrontEnd/src/store/users/actions/actions.js"],"names":["actionTypes","message","api","uploadFile","fetchUsersStart","type","FETCH_USERS_START","fetchUsersSuccess","users","FETCH_USERS_SUCCESS","newUserStart","NEW_USER_START","newUserSuccess","NEW_USER_SUCCESS","loginUserStart","LOGIN_USER_START","loginUserSuccess","data","LOGIN_USER_SUCCESS","loginUserFail","LOGIN_USER_FAIL","setUserLogin","SET_USER_LOGIN","setUserLogoff","SET_USER_LOGOFF","uploadPicStart","UPLOAD_PIC_START","uploadPicSuccess","UPLOAD_PIC_SUCCESS","uploadPicFail","UPLOAD_PIC_FAIL","fetchUsers","dispatch","response","get","fetchedUsers","key","push","err","console","error","createUser","userData","config","bucketName","Name","region","accessKeyId","secretAccessKey","profile_pic","post","success","loginUser","Error","errorUser","username","uploadPic","compare","a","b","name"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actionTypes';\r\n// import axios from '../../../axios-orders';\r\nimport {message} from 'antd';\r\nimport api from '../../../api/api';\r\nimport { uploadFile } from 'react-s3';\r\n\r\n\r\nexport const fetchUsersStart = () => ({\r\n    type: actionTypes.FETCH_USERS_START\r\n});\r\n\r\nexport const fetchUsersSuccess = (users) => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    users\r\n})\r\n\r\nexport const newUserStart = () => ({\r\n    type: actionTypes.NEW_USER_START\r\n})\r\n\r\nexport const newUserSuccess = () => ({\r\n    type:actionTypes.NEW_USER_SUCCESS\r\n})\r\n\r\nexport const loginUserStart =  () => ({\r\n    type: actionTypes.LOGIN_USER_START\r\n})\r\n\r\nexport const loginUserSuccess = (data) => ({\r\n    type: actionTypes.LOGIN_USER_SUCCESS,\r\n    data\r\n})\r\n\r\nexport const loginUserFail = (data) => ({\r\n    type: actionTypes.LOGIN_USER_FAIL,\r\n    data\r\n})\r\n\r\nexport const setUserLogin = () => ({\r\n    type:actionTypes.SET_USER_LOGIN\r\n})\r\n\r\nexport const setUserLogoff = () => ({\r\n    type:actionTypes.SET_USER_LOGOFF\r\n})\r\n\r\nexport const uploadPicStart = () => ({\r\n    type:actionTypes.UPLOAD_PIC_START\r\n})\r\n\r\nexport const uploadPicSuccess = (data) => ({\r\n    type: actionTypes.UPLOAD_PIC_SUCCESS,\r\n    data\r\n})\r\n\r\nexport const uploadPicFail = () => ({\r\n    type:actionTypes.UPLOAD_PIC_FAIL\r\n})\r\nexport const fetchUsers = () => async(dispatch) => {\r\n    dispatch(fetchUsersStart())\r\n    try {\r\n        const response  = await api.get('/users')\r\n        const fetchedUsers = [];\r\n        for (const key in response.data) {\r\n            fetchedUsers.push({\r\n                ...response.data[key]\r\n            })\r\n        }\r\n        //fetchedUsers.sort(compare);\r\n        dispatch(fetchUsersSuccess(fetchedUsers));\r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const createUser = (userData) => async(dispatch) => {\r\n    dispatch(newUserStart())\r\n    const config = {\r\n        bucketName: \"aimsbconnectbucket\",\r\n        Name: \"test.png\",\r\n        region: \"us-east-1\",\r\n        accessKeyId: \"AKIA6HGPOTO2LVH67RO2\",\r\n        secretAccessKey: \"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\"\r\n    }\r\n    try {\r\n        uploadFile(userData.profile_pic, config)\r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n    try {\r\n        await api.post('/users/', userData);\r\n        dispatch(newUserSuccess())\r\n        message.success('User Registration Success!');\r\n        \r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const loginUser = (userData) => async(dispatch) => {\r\n    dispatch(loginUserStart())\r\n    try {\r\n        const response = await api.post('/user-login', userData)\r\n        if(response.data !== ''){\r\n            await dispatch(setUserLogin())\r\n            await dispatch(loginUserSuccess(response.data))\r\n        } else {\r\n            throw new Error(\"Invalid Username/Password\")\r\n        }\r\n        \r\n    } catch (err) {\r\n       const errorUser = {username: 'error'}\r\n        console.error(err.message)\r\n        message.error('Invalid Username or Password!')\r\n        await dispatch(setUserLogoff())\r\n        dispatch(loginUserFail(errorUser))\r\n        \r\n    }\r\n}\r\n\r\nexport const uploadPic = (data) => async(dispatch) => {\r\n    dispatch(uploadPicStart())\r\n    try {\r\n        \r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n} \r\n\r\nconst compare = (a, b) => {\r\n    if(a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if(a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }"]},"metadata":{},"sourceType":"module"}