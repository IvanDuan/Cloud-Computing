{"ast":null,"code":"var util = require('../util');\n\nvar Rest = require('./rest');\n\nvar Json = require('./json');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nvar METHODS_WITHOUT_BODY = ['GET', 'HEAD', 'DELETE'];\n\nfunction unsetContentLength(req) {\n  var payloadMember = util.getRequestPayloadShape(req);\n\n  if (payloadMember === undefined && METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) >= 0) {\n    delete req.httpRequest.headers['Content-Length'];\n  }\n}\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params || {}, payloadShape);\n      applyContentTypeHeader(req);\n    } else if (params !== undefined) {\n      // non-JSON payload\n      req.httpRequest.body = params;\n\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    req.httpRequest.body = builder.build(req.params, input);\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req); // never send body payload on GET/HEAD/DELETE\n\n  if (METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData,\n  unsetContentLength: unsetContentLength\n};","map":{"version":3,"sources":["C:/Users/tanma/Desktop/AUT/INFS803/Project/Cloud-Computing/NewFrontEnd/node_modules/aws-sdk/lib/protocol/rest_json.js"],"names":["util","require","Rest","Json","JsonBuilder","JsonParser","METHODS_WITHOUT_BODY","unsetContentLength","req","payloadMember","getRequestPayloadShape","undefined","indexOf","httpRequest","method","headers","populateBody","builder","input","service","api","operations","operation","payload","params","payloadShape","members","type","body","build","applyContentTypeHeader","isStreaming","isBinary","buildRequest","extractError","resp","extractData","request","rules","output","parser","hasEventOutput","httpResponse","isEventStream","data","createEventStream","AWS","HttpClient","streamsApiVersion","stream","parse","toType","merge","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIG,WAAW,GAAGH,OAAO,CAAC,iBAAD,CAAzB;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,gBAAD,CAAxB;;AAEA,IAAIK,oBAAoB,GAAG,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,CAA3B;;AAEA,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,aAAa,GAAGT,IAAI,CAACU,sBAAL,CAA4BF,GAA5B,CAApB;;AACA,MACEC,aAAa,KAAKE,SAAlB,IACAL,oBAAoB,CAACM,OAArB,CAA6BJ,GAAG,CAACK,WAAJ,CAAgBC,MAA7C,KAAwD,CAF1D,EAGE;AACA,WAAON,GAAG,CAACK,WAAJ,CAAgBE,OAAhB,CAAwB,gBAAxB,CAAP;AACD;AACF;;AAED,SAASC,YAAT,CAAsBR,GAAtB,EAA2B;AACzB,MAAIS,OAAO,GAAG,IAAIb,WAAJ,EAAd;AACA,MAAIc,KAAK,GAAGV,GAAG,CAACW,OAAJ,CAAYC,GAAZ,CAAgBC,UAAhB,CAA2Bb,GAAG,CAACc,SAA/B,EAA0CJ,KAAtD;;AAEA,MAAIA,KAAK,CAACK,OAAV,EAAmB;AACjB,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,YAAY,GAAGP,KAAK,CAACQ,OAAN,CAAcR,KAAK,CAACK,OAApB,CAAnB;AACAC,IAAAA,MAAM,GAAGhB,GAAG,CAACgB,MAAJ,CAAWN,KAAK,CAACK,OAAjB,CAAT;;AAEA,QAAIE,YAAY,CAACE,IAAb,KAAsB,WAA1B,EAAuC;AACrCnB,MAAAA,GAAG,CAACK,WAAJ,CAAgBe,IAAhB,GAAuBX,OAAO,CAACY,KAAR,CAAcL,MAAM,IAAI,EAAxB,EAA4BC,YAA5B,CAAvB;AACAK,MAAAA,sBAAsB,CAACtB,GAAD,CAAtB;AACD,KAHD,MAGO,IAAIgB,MAAM,KAAKb,SAAf,EAA0B;AAC/B;AACAH,MAAAA,GAAG,CAACK,WAAJ,CAAgBe,IAAhB,GAAuBJ,MAAvB;;AACA,UAAIC,YAAY,CAACE,IAAb,KAAsB,QAAtB,IAAkCF,YAAY,CAACM,WAAnD,EAAgE;AAC9DD,QAAAA,sBAAsB,CAACtB,GAAD,EAAM,IAAN,CAAtB;AACD;AACF;AACF,GAfD,MAeO;AACLA,IAAAA,GAAG,CAACK,WAAJ,CAAgBe,IAAhB,GAAuBX,OAAO,CAACY,KAAR,CAAcrB,GAAG,CAACgB,MAAlB,EAA0BN,KAA1B,CAAvB;AACAY,IAAAA,sBAAsB,CAACtB,GAAD,CAAtB;AACD;AACF;;AAED,SAASsB,sBAAT,CAAgCtB,GAAhC,EAAqCwB,QAArC,EAA+C;AAC7C,MAAI,CAACxB,GAAG,CAACK,WAAJ,CAAgBE,OAAhB,CAAwB,cAAxB,CAAL,EAA8C;AAC5C,QAAIY,IAAI,GAAGK,QAAQ,GAAG,qBAAH,GAA2B,kBAA9C;AACAxB,IAAAA,GAAG,CAACK,WAAJ,CAAgBE,OAAhB,CAAwB,cAAxB,IAA0CY,IAA1C;AACD;AACF;;AAED,SAASM,YAAT,CAAsBzB,GAAtB,EAA2B;AACzBN,EAAAA,IAAI,CAAC+B,YAAL,CAAkBzB,GAAlB,EADyB,CAGzB;;AACA,MAAIF,oBAAoB,CAACM,OAArB,CAA6BJ,GAAG,CAACK,WAAJ,CAAgBC,MAA7C,IAAuD,CAA3D,EAA8D;AAC5DE,IAAAA,YAAY,CAACR,GAAD,CAAZ;AACD;AACF;;AAED,SAAS0B,YAAT,CAAsBC,IAAtB,EAA4B;AAC1BhC,EAAAA,IAAI,CAAC+B,YAAL,CAAkBC,IAAlB;AACD;;AAED,SAASC,WAAT,CAAqBD,IAArB,EAA2B;AACzBjC,EAAAA,IAAI,CAACkC,WAAL,CAAiBD,IAAjB;AAEA,MAAI3B,GAAG,GAAG2B,IAAI,CAACE,OAAf;AACA,MAAIf,SAAS,GAAGd,GAAG,CAACW,OAAJ,CAAYC,GAAZ,CAAgBC,UAAhB,CAA2Bb,GAAG,CAACc,SAA/B,CAAhB;AACA,MAAIgB,KAAK,GAAG9B,GAAG,CAACW,OAAJ,CAAYC,GAAZ,CAAgBC,UAAhB,CAA2Bb,GAAG,CAACc,SAA/B,EAA0CiB,MAA1C,IAAoD,EAAhE;AACA,MAAIC,MAAJ;AACA,MAAIC,cAAc,GAAGnB,SAAS,CAACmB,cAA/B;;AAEA,MAAIH,KAAK,CAACf,OAAV,EAAmB;AACjB,QAAId,aAAa,GAAG6B,KAAK,CAACZ,OAAN,CAAcY,KAAK,CAACf,OAApB,CAApB;AACA,QAAIK,IAAI,GAAGO,IAAI,CAACO,YAAL,CAAkBd,IAA7B;;AACA,QAAInB,aAAa,CAACkC,aAAlB,EAAiC;AAC/BH,MAAAA,MAAM,GAAG,IAAInC,UAAJ,EAAT;AACA8B,MAAAA,IAAI,CAACS,IAAL,CAAUrB,OAAV,IAAqBvB,IAAI,CAAC6C,iBAAL,CACnBC,GAAG,CAACC,UAAJ,CAAeC,iBAAf,KAAqC,CAArC,GAAyCb,IAAI,CAACO,YAAL,CAAkBO,MAA3D,GAAoErB,IADjD,EAEnBY,MAFmB,EAGnB/B,aAHmB,CAArB;AAKD,KAPD,MAOO,IAAIA,aAAa,CAACkB,IAAd,KAAuB,WAAvB,IAAsClB,aAAa,CAACkB,IAAd,KAAuB,MAAjE,EAAyE;AAC9E,UAAIa,MAAM,GAAG,IAAInC,UAAJ,EAAb;AACA8B,MAAAA,IAAI,CAACS,IAAL,CAAUN,KAAK,CAACf,OAAhB,IAA2BiB,MAAM,CAACU,KAAP,CAAatB,IAAb,EAAmBnB,aAAnB,CAA3B;AACD,KAHM,MAGA,IAAIA,aAAa,CAACkB,IAAd,KAAuB,QAAvB,IAAmClB,aAAa,CAACsB,WAArD,EAAkE;AACvEI,MAAAA,IAAI,CAACS,IAAL,CAAUN,KAAK,CAACf,OAAhB,IAA2BK,IAA3B;AACD,KAFM,MAEA;AACLO,MAAAA,IAAI,CAACS,IAAL,CAAUN,KAAK,CAACf,OAAhB,IAA2Bd,aAAa,CAAC0C,MAAd,CAAqBvB,IAArB,CAA3B;AACD;AACF,GAlBD,MAkBO;AACL,QAAIgB,IAAI,GAAGT,IAAI,CAACS,IAAhB;AACAzC,IAAAA,IAAI,CAACiC,WAAL,CAAiBD,IAAjB;AACAA,IAAAA,IAAI,CAACS,IAAL,GAAY5C,IAAI,CAACoD,KAAL,CAAWR,IAAX,EAAiBT,IAAI,CAACS,IAAtB,CAAZ;AACD;AACF;AAED;AACA;AACA;;;AACAS,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,YAAY,EAAEA,YADC;AAEfC,EAAAA,YAAY,EAAEA,YAFC;AAGfE,EAAAA,WAAW,EAAEA,WAHE;AAIf7B,EAAAA,kBAAkB,EAAEA;AAJL,CAAjB","sourcesContent":["var util = require('../util');\nvar Rest = require('./rest');\nvar Json = require('./json');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\n\nvar METHODS_WITHOUT_BODY = ['GET', 'HEAD', 'DELETE'];\n\nfunction unsetContentLength(req) {\n  var payloadMember = util.getRequestPayloadShape(req);\n  if (\n    payloadMember === undefined &&\n    METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) >= 0\n  ) {\n    delete req.httpRequest.headers['Content-Length'];\n  }\n}\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params || {}, payloadShape);\n      applyContentTypeHeader(req);\n    } else if (params !== undefined) {\n      // non-JSON payload\n      req.httpRequest.body = params;\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    req.httpRequest.body = builder.build(req.params, input);\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on GET/HEAD/DELETE\n  if (METHODS_WITHOUT_BODY.indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData,\n  unsetContentLength: unsetContentLength\n};\n"]},"metadata":{},"sourceType":"script"}