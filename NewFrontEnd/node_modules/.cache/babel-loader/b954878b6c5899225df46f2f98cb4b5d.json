{"ast":null,"code":"import * as actionTypes from '../actionTypes'; // import axios from '../../../axios-orders';\n\nimport { message } from 'antd';\nimport api from '../../../api/api';\nexport const fetchUsersStart = () => ({\n  type: actionTypes.FETCH_USERS_START\n});\nexport const fetchUsersSuccess = users => ({\n  type: actionTypes.FETCH_USERS_SUCCESS,\n  users\n});\nexport const newUserStart = () => ({\n  type: actionTypes.NEW_USER_START\n});\nexport const newUserSuccess = () => ({\n  type: actionTypes.NEW_USER_SUCCESS\n});\nexport const loginUserStart = () => ({\n  type: actionTypes.LOGIN_USER_START\n});\nexport const loginUserSuccess = data => ({\n  type: actionTypes.LOGIN_USER_SUCCESS,\n  data\n});\nexport const loginUserFail = () => ({\n  type: actionTypes.LOGIN_USER_FAIL\n});\nexport const fetchUsers = () => async dispatch => {\n  dispatch(fetchUsersStart());\n\n  try {\n    const response = await api.get('/users');\n    const fetchedUsers = [];\n\n    for (const key in response.data) {\n      fetchedUsers.push({ ...response.data[key]\n      });\n    } //fetchedUsers.sort(compare);\n\n\n    dispatch(fetchUsersSuccess(fetchedUsers));\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createUser = userData => async dispatch => {\n  dispatch(newUserStart());\n\n  try {\n    await api.post('/users/', userData);\n    dispatch(newUserSuccess());\n    message.success('User Registration Success!');\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const loginUser = userData => async dispatch => {\n  dispatch(loginUserStart());\n\n  try {\n    const response = await api.post('/user-login', userData);\n\n    if (response.data === '') {\n      throw \"Blank Response\";\n    }\n\n    console.log('response: ', response.data);\n    dispatch(loginUserSuccess(response.data));\n  } catch (err) {\n    console.error(err.message);\n    message.error('Invalid Username or Password!');\n    dispatch(loginUserFail());\n  }\n};\n\nconst compare = (a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n\n  if (a.name > b.name) {\n    return 1;\n  }\n\n  return 0;\n};","map":{"version":3,"sources":["C:/Users/tanma/Desktop/AUT/INFS803/Project/Cloud-Computing/NewFrontEnd/src/store/users/actions/actions.js"],"names":["actionTypes","message","api","fetchUsersStart","type","FETCH_USERS_START","fetchUsersSuccess","users","FETCH_USERS_SUCCESS","newUserStart","NEW_USER_START","newUserSuccess","NEW_USER_SUCCESS","loginUserStart","LOGIN_USER_START","loginUserSuccess","data","LOGIN_USER_SUCCESS","loginUserFail","LOGIN_USER_FAIL","fetchUsers","dispatch","response","get","fetchedUsers","key","push","err","console","error","createUser","userData","post","success","loginUser","log","compare","a","b","name"],"mappings":"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","sourcesContent":["import * as actionTypes from '../actionTypes';\r\n// import axios from '../../../axios-orders';\r\nimport {message} from 'antd';\r\nimport api from '../../../api/api';\r\n\r\n\r\n\r\nexport const fetchUsersStart = () => ({\r\n    type: actionTypes.FETCH_USERS_START\r\n});\r\n\r\nexport const fetchUsersSuccess = (users) => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    users\r\n})\r\n\r\nexport const newUserStart = () => ({\r\n    type: actionTypes.NEW_USER_START\r\n})\r\n\r\nexport const newUserSuccess = () => ({\r\n    type:actionTypes.NEW_USER_SUCCESS\r\n})\r\n\r\nexport const loginUserStart =  () => ({\r\n    type: actionTypes.LOGIN_USER_START\r\n})\r\n\r\nexport const loginUserSuccess = (data) => ({\r\n    type: actionTypes.LOGIN_USER_SUCCESS,\r\n    data\r\n})\r\n\r\nexport const loginUserFail = () => ({\r\n    type: actionTypes.LOGIN_USER_FAIL\r\n})\r\n\r\nexport const fetchUsers = () => async(dispatch) => {\r\n    dispatch(fetchUsersStart())\r\n    try {\r\n        const response  = await api.get('/users')\r\n        const fetchedUsers = [];\r\n        for (const key in response.data) {\r\n            fetchedUsers.push({\r\n                ...response.data[key]\r\n            })\r\n        }\r\n        //fetchedUsers.sort(compare);\r\n        dispatch(fetchUsersSuccess(fetchedUsers));\r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const createUser = (userData) => async(dispatch) => {\r\n    dispatch(newUserStart())\r\n    try {\r\n        await api.post('/users/', userData);\r\n        dispatch(newUserSuccess())\r\n        message.success('User Registration Success!');\r\n        \r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const loginUser = (userData) => async(dispatch) => {\r\n    dispatch(loginUserStart())\r\n    try {\r\n        const response = await api.post('/user-login', userData)\r\n        if(response.data === '') {\r\n            throw \"Blank Response\"\r\n        }\r\n        console.log('response: ', response.data)\r\n        dispatch(loginUserSuccess(response.data))\r\n    } catch (err) {\r\n        console.error(err.message)\r\n        message.error('Invalid Username or Password!')\r\n        dispatch(loginUserFail())\r\n        \r\n    }\r\n}\r\n\r\nconst compare = (a, b) => {\r\n    if(a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if(a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }"]},"metadata":{},"sourceType":"module"}