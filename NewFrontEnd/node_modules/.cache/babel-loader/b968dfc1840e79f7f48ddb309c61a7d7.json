{"ast":null,"code":"import * as actionTypes from '../actionTypes';\nimport { updateObject } from '../../utility';\nconst initialState = {\n  userId: '',\n  userLogged: false,\n  users: [],\n  user: {},\n  loading: false\n};\n\nconst fetchUsersStart = (state, action) => updateObject(state, {\n  loading: true\n});\n\nconst fetchUsersSuccess = (state, action) => updateObject(state, {\n  users: action.users,\n  loading: false\n});\n\nconst newUserStart = (state, action) => updateObject(state, {\n  loading: true\n});\n\nconst newUserSuccess = (state, action) => updateObject(state, {\n  loading: false\n});\n\nconst loginUserStart = (state, action) => updateObject(state, {\n  loading: true\n});\n\nconst loginUserSuccess = (state, action) => updateObject(state, {\n  user: action.data,\n  loading: false\n});\n\nconst loginUserFail = (state, action) => updateObject(state, {\n  user: action.data,\n  loading: false\n});\n\nconst users = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.FETCH_USERS_START:\n      return fetchUsersStart(state, action);\n\n    case actionTypes.FETCH_USERS_SUCCESS:\n      return fetchUsersSuccess(state, action);\n\n    case actionTypes.NEW_USER_START:\n      return newUserStart(state, action);\n\n    case actionTypes.NEW_USER_SUCCESS:\n      return newUserSuccess(state, action);\n\n    case actionTypes.LOGIN_USER_START:\n      return loginUserStart(state, action);\n\n    case actionTypes.LOGIN_USER_SUCCESS:\n      return loginUserSuccess(state, action);\n\n    case actionTypes.LOGIN_USER_FAIL:\n      return loginUserFail(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default users;","map":{"version":3,"sources":["C:/Users/tanma/Desktop/AUT/INFS803/Project/Cloud-Computing/NewFrontEnd/src/store/users/reducer/reducer.js"],"names":["actionTypes","updateObject","initialState","userId","userLogged","users","user","loading","fetchUsersStart","state","action","fetchUsersSuccess","newUserStart","newUserSuccess","loginUserStart","loginUserSuccess","data","loginUserFail","type","FETCH_USERS_START","FETCH_USERS_SUCCESS","NEW_USER_START","NEW_USER_SUCCESS","LOGIN_USER_START","LOGIN_USER_SUCCESS","LOGIN_USER_FAIL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B;AACA,SAAQC,YAAR,QAA2B,eAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,UAAU,EAAE,KAFK;AAGjBC,EAAAA,KAAK,EAAE,EAHU;AAIjBC,EAAAA,IAAI,EAAE,EAJW;AAKjBC,EAAAA,OAAO,EAAE;AALQ,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAACF,EAAAA,OAAO,EAAE;AAAV,CAAR,CAAvD;;AAEA,MAAMI,iBAAiB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAC7DJ,EAAAA,KAAK,EAAEK,MAAM,CAACL,KAD+C;AAE7DE,EAAAA,OAAO,EAAC;AAFqD,CAAR,CAAzD;;AAKA,MAAMK,YAAY,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAACF,EAAAA,OAAO,EAAE;AAAV,CAAR,CAApD;;AACA,MAAMM,cAAc,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAC1DF,EAAAA,OAAO,EAAE;AADiD,CAAR,CAAtD;;AAIA,MAAMO,cAAc,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAACF,EAAAA,OAAO,EAAE;AAAV,CAAR,CAAtD;;AACA,MAAMQ,gBAAgB,GAAG,CAACN,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AAC5DH,EAAAA,IAAI,EAAEI,MAAM,CAACM,IAD+C;AAE5DT,EAAAA,OAAO,EAAE;AAFmD,CAAR,CAAxD;;AAKA,MAAMU,aAAa,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmBT,YAAY,CAACQ,KAAD,EAAQ;AACzDH,EAAAA,IAAI,EAAEI,MAAM,CAACM,IAD4C;AAEzDT,EAAAA,OAAO,EAAE;AAFgD,CAAR,CAArD;;AAKA,MAAMF,KAAK,GAAG,YAAkC;AAAA,MAAjCI,KAAiC,uEAAzBP,YAAyB;AAAA,MAAXQ,MAAW;;AAC5C,UAAQA,MAAM,CAACQ,IAAf;AACI,SAAKlB,WAAW,CAACmB,iBAAjB;AAAoC,aAAOX,eAAe,CAACC,KAAD,EAAQC,MAAR,CAAtB;;AACpC,SAAKV,WAAW,CAACoB,mBAAjB;AAAsC,aAAOT,iBAAiB,CAACF,KAAD,EAAQC,MAAR,CAAxB;;AACtC,SAAKV,WAAW,CAACqB,cAAjB;AAAiC,aAAOT,YAAY,CAACH,KAAD,EAAQC,MAAR,CAAnB;;AACjC,SAAKV,WAAW,CAACsB,gBAAjB;AAAmC,aAAOT,cAAc,CAACJ,KAAD,EAAQC,MAAR,CAArB;;AACnC,SAAKV,WAAW,CAACuB,gBAAjB;AAAmC,aAAOT,cAAc,CAACL,KAAD,EAAQC,MAAR,CAArB;;AACnC,SAAKV,WAAW,CAACwB,kBAAjB;AAAqC,aAAOT,gBAAgB,CAACN,KAAD,EAAQC,MAAR,CAAvB;;AACrC,SAAKV,WAAW,CAACyB,eAAjB;AAAkC,aAAOR,aAAa,CAACR,KAAD,EAAQC,MAAR,CAApB;;AAClC;AAAS,aAAOD,KAAP;AARb;AAWH,CAZD;;AAcA,eAAeJ,KAAf","sourcesContent":["import * as actionTypes from '../actionTypes';\r\nimport {updateObject} from '../../utility';\r\n\r\nconst initialState = {\r\n    userId: '',\r\n    userLogged: false,\r\n    users: [],\r\n    user: {},\r\n    loading: false\r\n}\r\n\r\nconst fetchUsersStart = (state, action) => updateObject(state, {loading: true});\r\n\r\nconst fetchUsersSuccess = (state, action) => updateObject(state, {\r\n    users: action.users,\r\n    loading:false\r\n})\r\n\r\nconst newUserStart = (state, action) => updateObject(state, {loading: true});\r\nconst newUserSuccess = (state, action) => updateObject(state, {\r\n    loading: false\r\n})\r\n\r\nconst loginUserStart = (state, action) => updateObject(state, {loading: true});\r\nconst loginUserSuccess = (state, action) => updateObject(state, {\r\n    user: action.data,\r\n    loading: false\r\n})\r\n\r\nconst loginUserFail = (state, action) => updateObject(state, {\r\n    user: action.data,\r\n    loading: false\r\n})\r\n\r\nconst users = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_USERS_START: return fetchUsersStart(state, action);\r\n        case actionTypes.FETCH_USERS_SUCCESS: return fetchUsersSuccess(state, action);\r\n        case actionTypes.NEW_USER_START: return newUserStart(state, action);\r\n        case actionTypes.NEW_USER_SUCCESS: return newUserSuccess(state, action);\r\n        case actionTypes.LOGIN_USER_START: return loginUserStart(state, action);\r\n        case actionTypes.LOGIN_USER_SUCCESS: return loginUserSuccess(state, action);\r\n        case actionTypes.LOGIN_USER_FAIL: return loginUserFail(state, action);\r\n        default: return state;\r\n\r\n    }\r\n}\r\n\r\nexport default users;"]},"metadata":{},"sourceType":"module"}