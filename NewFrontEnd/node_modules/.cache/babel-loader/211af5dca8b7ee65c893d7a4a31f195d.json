{"ast":null,"code":"import * as actionTypes from '../actionTypes'; // import axios from '../../../axios-orders';\n\nimport { message } from 'antd';\nimport api from '../../../api/api';\nimport { useNavigate } from \"react-router-dom\";\nexport const fetchUsersStart = () => ({\n  type: actionTypes.FETCH_USERS_START\n});\nexport const fetchUsersSuccess = users => ({\n  type: actionTypes.FETCH_USERS_SUCCESS,\n  users\n});\nexport const newUserStart = () => ({\n  type: actionTypes.NEW_USER_START\n});\nexport const newUserSuccess = user => ({\n  type: actionTypes.NEW_USER_SUCCESS,\n  user\n});\nexport const fetchUsers = () => async dispatch => {\n  dispatch(fetchUsersStart());\n\n  try {\n    const response = await api.get('/users');\n    const fetchedUsers = [];\n\n    for (const key in response.data) {\n      fetchedUsers.push({ ...response.data[key]\n      });\n    }\n\n    fetchedUsers.sort(compare);\n    dispatch(fetchUsersSuccess(fetchedUsers));\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createUser = userData => async dispatch => {\n  dispatch(newUserStart());\n\n  try {\n    const response = await api.post('/users/', userData);\n    message.success('User Registration Success!');\n  } catch (err) {\n    console.error(err.message);\n  }\n};\nexport const createUserSuccess = () => async dispatch => {};\n\nconst compare = (a, b) => {\n  if (a.name < b.name) {\n    return -1;\n  }\n\n  if (a.name > b.name) {\n    return 1;\n  }\n\n  return 0;\n};","map":{"version":3,"sources":["C:/Users/tanma/Desktop/AUT/INFS803/Project/Cloud-Computing/NewFrontEnd/src/store/users/actions/actions.js"],"names":["actionTypes","message","api","useNavigate","fetchUsersStart","type","FETCH_USERS_START","fetchUsersSuccess","users","FETCH_USERS_SUCCESS","newUserStart","NEW_USER_START","newUserSuccess","user","NEW_USER_SUCCESS","fetchUsers","dispatch","response","get","fetchedUsers","key","data","push","sort","compare","err","console","error","createUser","userData","post","success","createUserSuccess","a","b","name"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,gBAA7B,C,CACA;;AACA,SAAQC,OAAR,QAAsB,MAAtB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAIA,OAAO,MAAMC,eAAe,GAAG,OAAO;AAClCC,EAAAA,IAAI,EAAEL,WAAW,CAACM;AADgB,CAAP,CAAxB;AAIP,OAAO,MAAMC,iBAAiB,GAAIC,KAAD,KAAY;AACzCH,EAAAA,IAAI,EAAEL,WAAW,CAACS,mBADuB;AAEzCD,EAAAA;AAFyC,CAAZ,CAA1B;AAKP,OAAO,MAAME,YAAY,GAAG,OAAO;AAC/BL,EAAAA,IAAI,EAAEL,WAAW,CAACW;AADa,CAAP,CAArB;AAIP,OAAO,MAAMC,cAAc,GAAIC,IAAD,KAAW;AACrCR,EAAAA,IAAI,EAACL,WAAW,CAACc,gBADoB;AAErCD,EAAAA;AAFqC,CAAX,CAAvB;AAKP,OAAO,MAAME,UAAU,GAAG,MAAM,MAAMC,QAAN,IAAmB;AAC/CA,EAAAA,QAAQ,CAACZ,eAAe,EAAhB,CAAR;;AACA,MAAI;AACA,UAAMa,QAAQ,GAAI,MAAMf,GAAG,CAACgB,GAAJ,CAAQ,QAAR,CAAxB;AACA,UAAMC,YAAY,GAAG,EAArB;;AACA,SAAK,MAAMC,GAAX,IAAkBH,QAAQ,CAACI,IAA3B,EAAiC;AAC7BF,MAAAA,YAAY,CAACG,IAAb,CAAkB,EACd,GAAGL,QAAQ,CAACI,IAAT,CAAcD,GAAd;AADW,OAAlB;AAGH;;AACDD,IAAAA,YAAY,CAACI,IAAb,CAAkBC,OAAlB;AACAR,IAAAA,QAAQ,CAACT,iBAAiB,CAACY,YAAD,CAAlB,CAAR;AACH,GAVD,CAUE,OAAOM,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACxB,OAAlB;AACH;AACJ,CAfM;AAiBP,OAAO,MAAM2B,UAAU,GAAIC,QAAD,IAAc,MAAMb,QAAN,IAAmB;AACvDA,EAAAA,QAAQ,CAACN,YAAY,EAAb,CAAR;;AACA,MAAI;AACA,UAAMO,QAAQ,GAAG,MAAMf,GAAG,CAAC4B,IAAJ,CAAS,SAAT,EAAoBD,QAApB,CAAvB;AACA5B,IAAAA,OAAO,CAAC8B,OAAR,CAAgB,4BAAhB;AAEH,GAJD,CAIE,OAAON,GAAP,EAAY;AACVC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACxB,OAAlB;AACH;AACJ,CATM;AAWP,OAAO,MAAM+B,iBAAiB,GAAG,MAAM,MAAMhB,QAAN,IAAmB,CAEzD,CAFM;;AAIP,MAAMQ,OAAO,GAAG,CAACS,CAAD,EAAIC,CAAJ,KAAU;AACtB,MAAGD,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAoB;AAClB,WAAO,CAAC,CAAR;AACD;;AACD,MAAGF,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAd,EAAoB;AAClB,WAAO,CAAP;AACD;;AACD,SAAO,CAAP;AACD,CARH","sourcesContent":["import * as actionTypes from '../actionTypes';\r\n// import axios from '../../../axios-orders';\r\nimport {message} from 'antd';\r\nimport api from '../../../api/api';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nexport const fetchUsersStart = () => ({\r\n    type: actionTypes.FETCH_USERS_START\r\n});\r\n\r\nexport const fetchUsersSuccess = (users) => ({\r\n    type: actionTypes.FETCH_USERS_SUCCESS,\r\n    users\r\n})\r\n\r\nexport const newUserStart = () => ({\r\n    type: actionTypes.NEW_USER_START\r\n})\r\n\r\nexport const newUserSuccess = (user) => ({\r\n    type:actionTypes.NEW_USER_SUCCESS,\r\n    user\r\n})\r\n\r\nexport const fetchUsers = () => async(dispatch) => {\r\n    dispatch(fetchUsersStart())\r\n    try {\r\n        const response  = await api.get('/users')\r\n        const fetchedUsers = [];\r\n        for (const key in response.data) {\r\n            fetchedUsers.push({\r\n                ...response.data[key]\r\n            })\r\n        }\r\n        fetchedUsers.sort(compare);\r\n        dispatch(fetchUsersSuccess(fetchedUsers));\r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const createUser = (userData) => async(dispatch) => {\r\n    dispatch(newUserStart())\r\n    try {\r\n        const response = await api.post('/users/', userData);\r\n        message.success('User Registration Success!');\r\n        \r\n    } catch (err) {\r\n        console.error(err.message)\r\n    }\r\n}\r\n\r\nexport const createUserSuccess = () => async(dispatch) => {\r\n    \r\n}\r\n\r\nconst compare = (a, b) => {\r\n    if(a.name < b.name) {\r\n      return -1;\r\n    }\r\n    if(a.name > b.name) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }"]},"metadata":{},"sourceType":"module"}